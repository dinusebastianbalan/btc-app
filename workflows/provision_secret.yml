name: 'Provision Secret'

on:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Provision secret'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install Kubectl and get context
      run: |
        curl -LO https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client
        aws eks update-kubeconfig --region us-east-1 --name testcluster
        kubectl get namespace

    - name: helm install add repo and install csi
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        helm version
        helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
        helm install -n kube-system csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver  --set syncSecret.enabled=true --set enableSecretRotation=true


    - name: Kubectl install ascp
      run: kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml

    - name: eksctl install
      run: |
        ARCH=amd64
        PLATFORM=$(uname -s)_$ARCH
        curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
        tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl create iamserviceaccount \
            --region=us-east-1 --name "bday-caccount"  \
            --cluster testcluster \
            --attach-policy-arn arn:aws:iam::075948657693:policy/Secret_DB-policy --approve \
            --override-existing-serviceaccounts

    - name: create SecretProviderClass
      run: |
        cat << EOF > spc.yaml
        ---
        apiVersion: secrets-store.csi.x-k8s.io/v1
        kind: SecretProviderClass
        metadata:
          name: spc
        spec:
          provider: aws
          parameters:
            objects: |
                - objectName: "db_password-secret"
                  objectType: "secretsmanager"
        EOF
        kubectl apply -f spc.yaml
        kubectl get SecretProviderClass

    - name: create SecretProviderClass
      run: |
        cat << EOF > spc-k8s-secrets.yaml
        apiVersion: secrets-store.csi.x-k8s.io/v1
        kind: SecretProviderClass
        metadata:
          name: spc-k8s-secrets
        spec:
          provider: aws
          parameters: 
            objects: |
              - objectName: "db_password-secret"
                objectType: "secretsmanager"
                jmesPath:
                  - path: username
                    objectAlias: dbusername
                  - path: password
                    objectAlias: dbpassword
          secretObjects:                
            - secretName: my-secret-01
              type: Opaque
              data:
                - objectName: dbusername
                  key: db_username_01
                - objectName: dbpassword
                  key: db_password_01
        EOF
        kubectl apply -f spc-k8s-secrets.yaml
        kubectl get SecretProviderClass

    - name: test Secrets
      run: |
        cat << EOF > spc-k8s-secrets.yaml
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: spc-k8s-secrets
          labels:
            app: k8s-secrets
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: k8s-secrets
          template:
            metadata:
              labels:
                app: k8s-secrets
            spec:
              serviceAccountName: bday-caccount
              containers:
              - name: spc-k8s-secrets
                image: nginx
                imagePullPolicy: IfNotPresent
                ports:
                  - containerPort: 80
                volumeMounts:
                  - name: secrets-store-inline
                    mountPath: "/mnt/secrets"
                    readOnly: true
                env:
                  - name: DB_USERNAME_01
                    valueFrom:
                      secretKeyRef:
                        name: my-secret-01
                        key: db_username_01
                  - name: DB_PASSWORD_01
                    valueFrom:
                      secretKeyRef:
                        name: my-secret-01
                        key: db_password_01
              volumes:
                - name: secrets-store-inline
                  csi:
                    driver: secrets-store.csi.k8s.io
                    readOnly: true
                    volumeAttributes:
                      secretProviderClass: spc-k8s-secrets
        EOF
        kubectl apply -f spc-k8s-secrets.yaml
        export POD_NAME=$(kubectl get pods -l app=k8s-secrets -o jsonpath='{.items[].metadata.name}')
        kubectl wait --for condition=Ready pod/${POD_NAME}
        kubectl exec -it ${POD_NAME} -- cat /mnt/secrets/db_password-secret
        kubectl delete deploy spc-k8s-secrets

    - name: helm install ingress gateway
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        kubectl create namespace gateway
        helm install gateway ingress-nginx/ingress-nginx \
        --namespace gateway \
        --set controller.metrics.enabled=true \
        --set-string controller.metrics.service.annotations."prometheus\.io/port"="10254" \
        --set-string controller.metrics.service.annotations."prometheus\.io/scrape"="true"